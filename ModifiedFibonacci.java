import java.io.*;
import java.util.*;
import java.math.*;

/* HackerRank Modified Fibonacci Challenge
    Challenge in algorithms section
	
	This challenge asks for the nth Fibonacci term given any first two terms
	This is a modified Fibonacci, where instead of adding the previous terms, the second term is squared.
	For example the user enters 0,1,5. The first two terms are 0 and 1, the nth term (5) happens to also be 5.
	
	I usually like to use C++ but couldn't use any libraries with a data type that could handle the large numbers generated by this channel on HackerRank's IDE.
	So here is the solution in Java using BigInt.
	
	Briana Wright

*/
public class Solution 
{
	public static void main(String[] args) 
	{
    		//get input values
   		Scanner S = new Scanner(System.in);
    		int termOne = S.nextInt();
    		int termTwo = S.nextInt();
    		int nthTerm = S.nextInt();

		//convert input values to big integer
   		BigInteger term1 = BigInteger.valueOf(termOne);
  		BigInteger term2 = BigInteger.valueOf(termTwo);
		
		//base case
    		if(nthTerm == 1)
       			System.out.println(term1);
   		if(nthTerm == 2)
       			System.out.println(term2);
    		else 
		{
        		BigInteger answer = modifiedFib(nthTerm, term1, term2);
        		System.out.println(answer);
    		}
	}

	public static BigInteger modifiedFib(int nthTerm, BigInteger term1, BigInteger term2){
   		int i = 2;
    		BigInteger fib = BigInteger.valueOf(0);
    		BigInteger power;
    		while(i < nthTerm)
		{
        		power = term2.multiply(term2);
        		fib = term1.add(power);
        		term1 = term2;
        		term2 = fib;
        		i++;
    		}
    		return fib;
	}
}
